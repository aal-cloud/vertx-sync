/*\n
 * Copyright 2014 Red Hat, Inc.\n
 *\n
 * Red Hat licenses this file to you under the Apache License, version 2.0\n
 * (the "License"); you may not use this file except in compliance with the\n
 * License.  You may obtain a copy of the License at:\n
 *\n
 * http://www.apache.org/licenses/LICENSE-2.0\n
 *\n
 * Unless required by applicable law or agreed to in writing, software\n
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT\n
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n
 * License for the specific language governing permissions and limitations\n
 * under the License.\n
 */\n\n

package @{type.raw.translatePackageName("sync")};\n\n

@foreach{importedType:importedTypes}
	@if{!importedType.packageName.equals("java.lang")}
		import @{importedType};\n
	@end{}
@end{}
import @{ifaceFQCN};\n
import io.vertx.ext.sync.AsyncAdaptor;\n
import co.paralleluniverse.fibers.Suspendable;

\n
/**\n
 *\n
 * NOTE: This class has been automatically generated from the {@link @{type.name} original} non interface using Vert.x codegen.\n
 */\n
\n
public class @{ifaceSimpleName}Sync {\n\n
  private final @{ifaceSimpleName} delegate;\n\n
  public @{helper.getSimpleName(ifaceFQCN)}Sync(@{ifaceSimpleName} delegate) {\n
    this.delegate = delegate;\n
  }\n\n
  public @{ifaceSimpleName} asyncDel() {\n
    return delegate;\n
  }\n
\n
  // The sync methods\n\n
	@foreach{method:methods}@if{!method.staticMethod}
		@code{doneIt = false}
		@if{method.params.size() > 0}
			@code{lastParam=method.params.get(method.params.size() - 1)}
			@if{lastParam.type.kind == CLASS_HANDLER}
				@if{lastParam.type.args[0].kind == CLASS_ASYNC_RESULT}
					@code{resultType = lastParam.type.args[0].args[0]}
					@code{doneIt = true}
				  @Suspendable\n
				  public @if{resultType.kind == CLASS_API}@{resultType.raw.translatePackageName("sync")}.@{resultType.simpleName}Sync@else{}@{resultType.simpleName}@end{} @{method.name}(
					@code{paramCount = 0}
					@foreach{param: method.params}
						@code{paramCount = paramCount + 1}
						@if{paramCount < method.params.size()}
							@{param.type.simpleName} @{param.name}
						@end{}
						@if{paramCount < method.params.size() - 1}, @end{}
					@end{}
					) {\n
    try {\n
      return @if{resultType.kind == CLASS_API}new @{resultType.raw.translatePackageName("sync")}.@{resultType.simpleName}Sync(@end{}new AsyncAdaptor<@{resultType.simpleName}>() {\n
        @Override\n
        protected void requestAsync() {\n
          delegate.@{method.name}(
					@code{paramCount = 0}
					@foreach{param: method.params}
						@code{paramCount = paramCount + 1}
						@if{paramCount < method.params.size()}
							@{param.name}
						@end{}
						@if{paramCount < method.params.size() - 1}, @end{}
					@end{}@if{method.params.size() != 1}, @end{}this);\n
        }\n
      }.run()@if{resultType.kind == CLASS_API})@end{};\n
    } catch (Throwable t) {\n
      throw new RuntimeException(t);\n
    }\n
  }\n\n
				@end{}
			@end{}
		@end{}
	@end{}@end{}


}\n
